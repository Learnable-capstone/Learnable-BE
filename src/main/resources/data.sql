-- 멤버 1명
insert into member (username, email, role, social_type, social_id, created_at, updated_at) values
('테스트한글', 'test@gmail.com', 'ROLE_USER', 'google', 'google_id', now(), now());

-- 운영체제         : operating_system , subject_id = 1
-- 데이터베이스      : database_system , subject_id = 2
-- 컴퓨터구조론      : computer_architecture , subject_id = 3
-- 자료구조         : data_structure , subject_id = 4
-- 알고리즘         : algorithm      , subject_id = 5
-- 컴퓨터네트워크     : computer_network , subject_id = 6

-- 주제 6개
insert into subject (subject_name, created_at, updated_at) values
('operating_system', now(), now()),
('database_system', now(), now()),
('computer_architecture', now(), now()),
('data_structure', now(), now()),
('algorithm', now(), now()),
('computer_network', now(), now());

-- 각 질문 10개씩 메타데이터

-- 운영체제 , subject_id : 1
insert into question (subject_id, content, answer, created_at, updated_at) values
(1, '프로세스에 대해 설명해 주세요.', '프로세스는 실행 중인 프로그램입니다. 운영 체제가 실행을 제어하며, 프로그램은 코드, 데이터 및 실행 상태로 구성됩니다. 각 프로세스는 고유한 식별자, 실행 우선 순위 및 저장 공간을 가지며, 운영 체제는 이러한 프로세스를 관리합니다.

프로세스는 일반적으로 다음과 같은 단계를 거칩니다.

1. 프로그램이 로드됩니다.
2. 실행을 위한 프로세스의 초기화가 수행됩니다.
3. 프로세스가 실행 상태가 되면 운영 체제는 실행을 제어합니다.
4. 프로세스가 필요에 따라 입출력을 수행합니다.
5. 프로세스는 실행을 완료하고 운영 체제에게 제어를 반환합니다.

프로세스는 운영 체제의 중요한 역할을 합니다. 운영 체제는 여러 프로세스를 동시에 실행하고, 우선 순위를 지정하고, 자원 접근 및 공유를 제어하며, 문제가 발생하면 프로세스를 다시 시작할 수 있습니다. 프로세스는 운영 체제에게 중요한 정보를 제공하고, 시스템의 안정성과 보안을 유지하는 데 중요한 역할을 합니다.',now(), now()),
(1, '쓰레드에 대해 설명해 주세요.','쓰레드(Thread)는 프로그램 실행의 최소 단위로서, 하나의 프로세스 내에서 여러 개의 쓰레드를 생성하여 병렬적으로 동작할 수 있습니다. 이는 다중 작업 처리를 가능하게 합니다.

쓰레드는 각각의 실행 흐름이 고유한 스택 메모리를 갖고 있으며, 프로세스 내의 다른 쓰레드와 공유하는 코드, 데이터, 힙 메모리 등은 프로세스 자원으로서 공유됩니다.

쓰레드는 하나의 프로세스 내에서 최소 1개 이상 존재해야하며, 여러 개의 쓰레드를 생성하여 동시에 실행할 수 있습니다. 이때, 쓰레드 간의 상호작용에 필요한 동기화 기술(뮤텍스, 세마포어, 크리티컬 섹션 등)이 필요합니다.

쓰레드를 사용하면 프로그램의 실행 속도를 높일 수 있으며, 일정한 작업을 분할하여 처리하고 병렬화하여 처리할 수 있습니다. 하지만, 프로세스 내부에서 쓰레드 간의 동기화 문제가 발생할 가능성이 있어 이를 제어하는 코드 작성이 중요합니다.' ,now(), now()),
(1, 'IPC(Inter-Process-Communication)에 대해 설명해 주세요.','IPC(Inter-Process-Communication, 프로세스간 통신)은 다른 프로세스 간에 데이터를 공유하거나 서로간의 작업을 협력해서 수행할 수 있도록 하는 메커니즘입니다. 서로 다른 프로세스 간에 통신함으로써 프로세스는 서로의 실행 상태를 파악하고, 다른 프로세스의 작동 결과를 이용하거나 서로의 데이터를 공유할 수 있습니다.

IPC에는 다양한 방식이 있지만, 가장 많이 사용되는 방법으로는 파이프, 소켓, 공유 메모리, 메시지 큐, 세마포어 등이 있습니다. 파이프는 단방향 통신, 소켓은 양방향 통신이 가능하며 IP 네트워크를 통한 통신이 가능합니다. 공유 메모리는 메모리 공간을 공유하여 데이터를 전송하며, 메시지 큐는 데이터를 메시지 단위로 전송합니다. 세마포어는 공유 자원의 동시 접근을 제어하는 데 사용됩니다.

IPC는 다양한 운영 체제에서 지원되며, 다른 컴퓨터 간에도 통신이 가능합니다. 다른 프로세스 간에 효율적이고 안전한 통신을 가능하게 하기 때문에, 많은 프로그램에서 필수적인 요소 중 하나입니다.' ,now(), now()),
(1, '교착 상태(DeadLock)에 대해 설명해 주세요.','교착 상태란, 둘 이상의 프로세스가 서로 필요한 자원을 가지고 있으며, 각 프로세스가 상대방이 가지고 있는 자원을 기다리는 상황에서 더 이상 진행하지 못하는 상황을 말합니다. 이러한 상황에서는 각 프로세스가 대기하며, 아무 일도 일어나지 않습니다.

교착 상태를 해결하기 위해서는 다음과 같은 방법이 있습니다.
1. 프로세스가 필요로 하는 모든 자원을 미리 할당합니다.
2. 자원이 할당될 때, 다른 프로세스가 접근할 수 없도록 해제합니다.
3. 자원 요청에 대한 타임 아웃 시간을 별도로 설정하여, 일정 시간 내에 응답이 없을 경우 자원 할당을 취소합니다.
4. 순서대로 자원을 할당하도록 프로세스의 우선순위를 설정합니다.
5. 자원 공유 방법을 변경하여, 교착 상태를 방지합니다.

교착 상태는 시스템의 안정성을 저해하므로, 시스템 개발 및 운영 단계에서 꼭 고려해야 합니다.' ,now(), now()),
(1, '세마포어에 대해 설명해 주세요.','세마포어는 프로그래밍에서 공유 자원에 대한 접근 제어를 담당하는 동기화 기법 중 하나입니다.

공유 자원에 대한 동시 접근이 여러 스레드에서 발생할 경우, 이를 제어하지 않으면 예기치 않은 결과가 발생할 수 있습니다. 예를 들어, 한 스레드가 공유 자원을 사용하는 동안, 다른 스레드들이 이를 변경하면 값이 변형되거나, 무한 대기 상태로 빠져버릴 수 있습니다.

세마포어는 이러한 문제를 해결하기 위해, 공유 자원에 대한 접근 권한을 가진 스레드만이 접근할 수 있도록 해줍니다. 세마포어는 하나 이상의 정수 값을 가지며, 이를 ‘count’라고 합니다. 세마포어는 두 개의 기본 연산, ‘wait’와 ‘signal’을 제공합니다.

- wait 연산: count 값을 1 감소시키고, count 값이 음수가 되면 스레드를 대기 상태로 바꿉니다.
- signal 연산: count를 1 증가시키고, count 값이 0 이하면 대기 중인 스레드 중 하나를 깨워줍니다.

세마포어를 이용하면 여러 스레드 간의 공유 자원 사용 문제를 쉽게 해결할 수 있습니다. 하지만, 너무 많은 세마포어 사용을 지양해야 하며, 잘못된 사용으로 인해 deadlock이 발생할 수 있습니다. 따라서, 세마포어 사용 전에 신중하게 생각해야 합니다.' ,now(), now()),
(1, '뮤텍스에 대해 설명해 주세요.','뮤텍스(Mutex)는 상호 배제 기능을 제공하는 동기화 기법 중 하나로서, 공유 자원에 대한 접근을 동시에 하지 못하도록 보호하는 역할을 합니다. 뮤텍스는 일종의 잠금장치 역할을 하며, 하나의 스레드가 뮤텍스를 소유하고 있을 경우에는 다른 스레드가 이를 가져올 수 없습니다.

즉, 뮤텍스는 여러 스레드가 동시에 공유 자원을 사용하려 할 때, 동시 접근을 막고, 하나의 스레드만 공유 자원에 접근할 수 있도록 제어합니다. 이를 통해 신뢰성 높은 병행 프로그래밍을 구현할 수 있습니다.

뮤텍스는 락(Lock)을 획득한 스레드가 락을 해제하기 전까지 다른 스레드가 접근을 할 수 없으며, 뮤텍스를 사용하는 방법은 크게 두 가지입니다. 하나는 뮤텍스 변수를 이용하는 방법이며, 다른 하나는 뮤텍스 객체를 사용하는 방법입니다.

뮤텍스가 제공하는 동기화 메커니즘은 대부분 운영체제의 커널에서 지원하기 때문에, 시스템 자원을 소비한다는 단점이 있습니다. 따라서 뮤텍스를 사용할 때는 보다 효율적이고 경제적인 방법을 고려하여야 합니다.' ,now(), now()),
(1, '페이지 교체 알고리즘 중, LRU(Least-Recently-Used) 알고리즘에 대해 설명해 주세요.','LRU(Least-Recently-Used) 알고리즘은 페이지 교체 알고리즘 중 하나로, 가장 최근에 사용되지 않은 페이지를 교체하는 방식입니다.

이 알고리즘은 페이지를 주기억장치에 올릴 때마다 time stamp라는 값을 부여하게 됩니다. 사용된 페이지에 대해서는 해당 페이지가 사용될 때마다 time stamp 값을 갱신하게 됩니다. 따라서 time stamp 값이 가장 오래된 페이지를 LRU 페이지로 간주하고 교체합니다.

예를 들어, 페이지 A, B, C, D, E가 있을 때, 각 페이지의 time stamp 값이 다음과 같다고 가정해 봅시다.

A: 20, B: 15, C: 10, D: 5, E: 0

이 상황에서 새로운 페이지 F가 들어온다면, 가장 오래된 time stamp 값을 가지고 있는 E 페이지가 교체됩니다.

이 알고리즘의 장점은 시간적으로 균형잡힌 교체를 수행한다는 것입니다. 즉, 최근에 사용한 페이지는 교체되지 않고, 오래 전에 사용된 페이지만 교체됩니다. 그러나 LRU 알고리즘의 단점은 time stamp를 관리해야 한다는 것입니다. 이 때문에 구현이 복잡해질 수 있습니다.' ,now(), now()),
(1, '캐시 메모리에 대해 설명해 주세요.', '캐시 메모리는 빠른 속도로 데이터를 접근할 수 있는 메모리로, CPU와 주 기억장치(메인 메모리) 사이에 위치합니다. 주 기억장치는 CPU가 처리할 데이터를 저장하고 있으며, CPU가 데이터를 처리하려면 주 기억장치에서 데이터를 가져와야 합니다. 그러나 주 기억장치는 속도가 느리기 때문에 데이터를 가져오는 데 시간이 많이 걸리며, 이는 CPU의 연산 속도를 늦추게 됩니다.

캐시 메모리는 이러한 문제를 해결하기 위해 고속의 메모리를 사용하여 CPU가 필요로 하는 데이터를 빠르게 제공합니다. CPU가 데이터를 처리할 때, 우선 캐시 메모리에서 해당 데이터가 있는지 확인합니다. 데이터가 캐시 메모리에 있으면, 주 기억장치까지 가지 않고 빠르게 처리가 가능합니다. 만약 캐시 메모리에 데이터가 없으면, 주 기억장치에서 데이터를 가져와 캐시 메모리에 저장합니다. 이렇게 함으로써, CPU가 데이터를 처리하는 속도가 빨라지게 됩니다.

캐시 메모리는 크게 레벨 1(L1) 캐시와 레벨 2(L2) 캐시로 분류됩니다. L1 캐시는 CPU 안에 내장되어 있고, 매우 빠른 속도로 데이터에 접근할 수 있습니다. L2 캐시는 CPU와 메인 메모리 사이에 위치하고, L1 캐시보다는 느리지만 메인 메모리보다는 빠른 속도로 데이터에 접근할 수 있습니다. 일반적으로, 캐시 메모리가 커질수록 성능이 향상됩니다.',now(), now()),
(1, '인터럽트에 대해 설명해 주세요.','인터럽트(Interrupt)는 컴퓨터 시스템에서 발생하는 이벤트로, 중단되고 있는 작업을 일시적으로 멈추고 새로운 작업을 처리하는 것을 말합니다. 이벤트는 하드웨어나 소프트웨어에서 발생할 수 있습니다.

하드웨어에서 발생하는 인터럽트는 예를 들어 입출력 장치에서 데이터가 도착하거나 버퍼가 가득 찼을 때 발생할 수 있습니다. 소프트웨어에서 발생할 수 있는 인터럽트는 예를 들어 예외 상황이나 인터럽트 요청을 처리해야 할 때 발생할 수 있습니다.

인터럽트는 운영체제에서 처리되며, 새로운 작업을 수행하기 전에 중단된 작업을 저장하고, 새로운 작업을 처리한 후 저장된 작업을 다시 불러오며 실행합니다. 이를 통해 여러 작업을 동시에 처리할 수 있습니다.

인터럽트는 시스템의 처리 속도와 성능을 향상시키며, 실시간 처리를 가능하게 합니다. 하지만 인터럽트가 많아질수록 오버헤드가 발생하므로 적절한 관리가 필요합니다.' ,now(), now()),
(1, 'Context-Switch에 대해 설명해 주세요.','Context-Switch란, 프로세스가 CPU를 점유하고 있을 때, 다른 프로세스로 전환이 일어나는 것을 의미합니다. 이 경우, CPU는 현재 실행 중인 프로세스의 상태를 저장하고, 다음에 실행할 프로세스의 상태를 불러와서 실행을 시작합니다. 이러한 과정에서, 현재 실행 중인 프로세스의 정보를 저장하는 것을 Context-Save, 다음에 실행할 프로세스의 정보를 불러오는 것을 Context-Restore라고 합니다.

Context-Switch는 시분할 운영체제에서 주로 사용되는 방식으로, CPU 시간을 작은 단위로 나누어 여러 프로세스가 동시에 실행되는 것을 가능하게 합니다. 하지만 Context-Switch는 많은 비용을 가지고 있기 때문에, 불필요한 Context-Switch를 최소화하는 것이 시스템 성능 향상에 중요한 역할을 합니다.' ,now(), now());

-- 데이터베이스 , subject_id : 2
insert into question (subject_id, content, answer,created_at, updated_at) values
(2, '관계형 데이터베이스의 장점에 대해 설명해 주세요.', '1. 데이터 중복 최소화: 정보를 중복되지 않도록 저장함으로써 데이터 일관성을 유지하고 관리 부담을 줄일 수 있습니다.

2. 표준화: 각각의 데이터가 동일한 이메일, 전화번호, 우편번호 등의 정보에 대해 일관된 형식을 사용하게 됩니다.

3. 데이터 정합성 유지: 모든 테이블의 관계에 대한 규칙을 지정하여 데이터 일관성을 유지할 수 있습니다.

4. 데이터 보안: 데이터베이스는 암호화, 접근 권한 제어 등 데이터의 보안을 유지할 수 있습니다.

5. 유연성: 데이터가 동적으로 변할 때 쉽게 수정하고 유지할 수 있습니다.

6. 질의 언어: SQL을 사용하여 데이터를 검색하고 수정하는 것이 가능하고, 이를 통해 IT 전문가나 비전문가 모두 쉽게 데이터를 이용할 수 있습니다.

7. 백업과 복구: 데이터베이스를 백업하고 복구할 수 있는 기능을 제공하여 데이터 선택, 복구, 병합 등을 쉽게 할 수 있습니다.',now(), now()),
(2, '비관계형 데이터베이스의 장점에 대해 설명해 주세요.','1. 유연성과 확장성 : 비관계형 데이터베이스는 스키마를 사용하지 않기 때문에 데이터를 추가하거나 수정할 때 스키마를 변경할 필요가 없습니다. 이는 더 많은 데이터가 추가되면서도 데이터베이스의 성능과 처리 속도를 유지할 수 있도록 합니다.

2. 고성능 : 비관계형 데이터베이스는 대량의 데이터를 빠르게 저장하고 처리할 수 있습니다. 명확한 스키마로 인한 복잡성 없이 데이터를 빠르게 조회할 수 있기 때문에 빠른 처리 속도를 유지할 수 있습니다.

3. 확장성 : 비관계형 데이터베이스는 수평 확장이 용이합니다. 이는 노드를 추가해서 처리 능력을 높일 수 있으므로, 더 많은 데이터 생성량을 다룰 수 있습니다.

4. 다양한 유형 지원 : 관계형 데이터베이스의 한계로 알려진 일부 데이터 타입에 비해 비관계형 데이터베이스는 다양한 데이터 유형과 포맷, 구조를 지원합니다. 특수한 데이터 타입을 지원하고 대용량의 비정형 데이터 (사진, 영상 등)를 관리하기 위한 최적화를 지원하기 위해서 입니다.

5. 비용 : 비관계형 데이터베이스는 명확한 스키마가 없고 유연성과 확장성, 고성능 제공으로 효율적으로 처리 완료됩니다. 따라서 데이터 저장 및 관리의 비용이 더 적게 듭니다.' ,now(), now()),
(2, 'Index에 대해 설명해 주세요.','Index는 데이터베이스나 파일 시스템에서 빠르게 검색하거나 정렬할 수 있도록 데이터를 구조화하는 데이터 구조입니다.

예를 들어, 책의 색인(목차)이 Index의 역할을 합니다. 책의 목차는 각 단어와 해당하는 페이지 번호를 기록하여 빠르게 원하는 내용을 찾아 볼 수 있도록 도와줍니다. 이와 비슷하게 데이터베이스에서 Index를 사용하면 데이터 검색이 빨라지고, 정렬도 쉽게 할 수 있습니다.

Index는 검색 대상 필드의 값을 기준으로 정렬되어 있으며, 이를 이용하여 데이터 검색 속도를 향상시킵니다. 또한, Index를 이용한다면 데이터 접근 비용이 적게 들기 때문에 데이터 검색 및 정렬 속도가 효율적으로 높아지고 성능도 향상됩니다.

하지만, Index를 사용하면 데이터 폭주와 같은 문제가 발생할 수 있으므로, 적절한 Index 설계가 필요합니다. 또, Index의 사용에 따른 추가 저장 공간 필요성도 고려해야 합니다.' ,now(), now()),
(2, '트랜잭션이란 무엇인가요?', '트랜잭션이란 데이터베이스 시스템에서 특정 작업을 하나의 논리적인 단위로 묶은 것을 말합니다. 이 작업은 데이터베이스에서 읽기, 쓰기, 수정 등의 여러가지 작업을 포함할 수 있습니다.

트랜잭션은 원자성, 일관성, 격리성, 지속성(ACID)의 특징을 갖습니다. 즉, 한번에 실행이 되거나 전혀 실행이 되지 않는 것으로, 한 트랜잭션의 실행이 완료되면 데이터베이스 상태는 일관성 있게 유지되어야 하며, 동시에 실행되는 다른 트랜잭션의 영향을 받지 않도록 격리되어야 합니다. 마지막으로 트랜잭션이 완료되면 영구적으로 변경된 사항이 데이터베이스에 반영되어야 합니다.

트랜잭션은 데이터베이스에서 중요한 개념으로, 데이터의 일관성과 무결성을 보장하는 데 매우 중요한 역할을 합니다.',now(), now()),
(2, '트랜잭션의 4가지 특징에 대해 설명해 주세요.','1. 원자성 (Atomicity) : 트랜잭션은 하나의 논리적 기능을 수행하며, 그 중간 과정에서 에러가 발생하면 실행 이전으로 롤백됩니다. 즉, 모든 작업이 정상적으로 수행되거나, 아예 실행되지 않아야 합니다.

2. 일관성 (Consistency) : 트랜잭션이 실행된 후에는 데이터베이스의 일관성이 유지되어야 합니다. 즉, 트랜잭션 이전 상태와 이후 상태 모두 데이터베이스의 일관성을 유지해야 합니다.

3. 격리성 (Isolation) : 여러 개의 트랜잭션이 데이터베이스에 동시에 접근하더라도 상호 간에 영향을 주지 않고, 각각 독립적으로 실행되어야 합니다. 즉, 트랜잭션 간에 서로의 작업에 간섭할 수 없어야 합니다.

4. 지속성 (Durability) : 트랜잭션이 성공적으로 완료되고 커밋되면, 해당 트랜잭션에 의해 수정된 데이터는 영구적으로 유지되어야 합니다. 이를 위해 로그 파일 등을 이용하여 데이터를 백업하고, 장애 시 백업된 데이터를 복원하는 작업이 필요합니다.' ,now(), now()),
(2, '정규화의 목적에 대해 설명해 주세요.','정규화는 관계형 데이터베이스의 설계 과정에서 중복된 데이터를 없애고 데이터의 일관성과 무결성을 보장하기 위한 과정입니다. 목적은 다음과 같습니다.

1. 중복된 데이터를 없애기 위해 데이터를 분해하고 테이블을 정규화합니다.

2. 데이터의 일관성을 보장하기 위해 테이블 간의 관계를 설정합니다.

3. 무결성을 보장하기 위해 데이터 값을 검증하는 제약조건을 설정합니다.

4. 데이터베이스의 성능을 최적화합니다.

정규화를 통해 데이터의 일관성과 무결성을 보장하고 중복된 데이터를 제거함으로써 저장공간을 절약하고 데이터 조회 및 처리를 최적화할 수 있습니다. 따라서 데이터베이스의 효율성을 높일 수 있습니다.' ,now(), now()),
(2, 'Primary Key에 대해 설명해 주세요.','Primary Key(기본 키)는 데이터베이스에서 각 레코드를 유일하게 대표하는 필드(열) 입니다. 즉, 기본적으로 각 레코드를 구분할 수 있는 고유한 값입니다.

Primary Key는 다음과 같은 특징을 가집니다.

1. 각 레코드를 유일하게 식별할 수 있습니다.
2. Null 값을 가질 수 없습니다.
3. 한 테이블 내에서 유일해야 합니다.
4. 자동으로 증가해야하는 경우가 있습니다.
5. Primary Key 값을 바꾸는 것은 금기사항입니다.

대표적인 Primary Key로는 ID(Column)가 있습니다. 일반적으로 모든 테이블에는 Primary Key 가 필요하며 데이터베이스 시스템 작동을 위해 필수적입니다.' ,now(), now()),
(2, 'Join에 대해 설명해 주세요.', 'Join은 관계형 데이터베이스에서 두 개 이상의 테이블에서 데이터를 가져와서 연결하는 작업입니다.

데이터베이스에서는 여러 개의 테이블이 있을 수 있고, 이러한 테이블은 데이터끼리의 상관 관계를 갖는 경우가 많습니다. 이때 특정한 필드를 중심으로 두 개 이상의 테이블을 연결해주는 것이 Join 작업입니다.

Join 작업을 하면 기존의 테이블 정보에서 새로운 정보를 추출할 수 있습니다. 두 개 이상의 테이블에 중복된 정보가 있을 경우 Join하여 테이블을 합쳐서 데이터를 조회하면 중복 데이터를 중복해서 볼 수 없게 됩니다.

Join은 Inner Join, Left Join, Right Join, Full Outer Join 등 다양한 방식으로 수행될 수 있으며, 각각 다른 결과를 반환합니다. 각 Join 방식은 테이블 간 연결 방식과 반환되는 결과가 다릅니다.',now(), now()),
(2, 'Delete,Truncate,Drop의 차이점은 무엇인가요?','Delete, Truncate, Drop은 모두 데이터베이스에서 데이터를 삭제하는 명령어입니다.

- Delete: Delete는 테이블에서 행(row) 단위로 데이터를 삭제합니다. 삭제한 데이터는 일반적으로 복구할 수 있습니다. Delete는 특정 행 혹은 조건에 해당하는 행을 삭제할 때 사용됩니다.

- Truncate: Truncate는 테이블의 데이터를 전체 삭제합니다. 전체 데이터를 삭제하기 때문에 속도가 빠르고 트랜잭션 로그도 생성하지 않습니다. Truncate는 테이블을 초기화하고 싶을 때 사용됩니다.

- Drop: Drop은 테이블 자체를 삭제합니다. 테이블을 삭제하는 것이기 때문에 해당 테이블과 관련된 모든 데이터도 함께 삭제됩니다. Drop은 테이블을 완전히 삭제하고 싶을 때 사용됩니다.

따라서, Delete는 일반적으로 특정 조건에 따라 데이터를 삭제할 때 사용되고, Truncate는 테이블을 초기화하거나, 매우 큰 데이터를 삭제할 때 사용되고, Drop은 테이블을 완전히 삭제할 때 사용됩니다.' ,now(), now()),
(2, '데이터베이스의 이상(Anomaly) 현상이란 무엇인가요?','데이터베이스에서 이상 현상은 정규화되지 않은 데이터베이스에서 발생하는 문제입니다. 이러한 현상은 데이터의 중복, 일관성 부재 및 업데이트 문제 등으로 나타납니다. 예를 들어, 중복 데이터가 있는 경우 데이터를 변경할 때 모든 사본을 업데이트해야하므로 데이터 일관성을 유지하는 데 어려움이 있습니다. 이상은 데이터의 신뢰성과 일관성을 저해하며, 대규모 데이터베이스에서 발생하면 시스템 성능과 확장성에도 영향을 미칩니다. 이러한 문제를 해결하기 위해 정규화된 데이터베이스 설계가 필요합니다.' ,now(), now());

-- 컴퓨터구조론 , subject_id : 3
insert into question (subject_id, content,answer,created_at, updated_at) values
(3, 'CPU의 동작 과정에 대해 설명해 주세요.','CPU는 중앙처리장치로서 컴퓨터 시스템에서 가장 중요한 역할을 합니다. CPU는 입력된 명령어를 해석하고 처리하는 일련의 동작 과정을 거칩니다.

1. Fetch: CPU는 주기억장치에서 다음 실행할 명령어를 가져옵니다.
2. Decode: 가져온 명령어를 이해하고 실행할 수 있는 형태로 해석합니다.
3. Execute: 명령어가 필요로 하는 계산이나 논리 동작을 수행합니다.
4. Write Back: 실행한 명령어가 결과를 내보내야 하는 경우, 그 결과를 주기억장치 또는 레지스터에 기록합니다.

이렇게 CPU는 범용 레지스터를 사용하여 계산을 수행하고, 주기억장치에서 데이터를 읽어들이고 쓰기도 합니다. 이 과정은 CPU의 클록 주파수에 의해 정확하게 타이밍 되며, 이 클록 주파수에 따라 CPU의 처리 성능이 결정됩니다.' ,now(), now()),
(3, 'Direct Mapped Cache의 장점 및 단점에 대해 설명해 주세요.','장점:
1. 구현이 간단하다: Direct Mapped Cache는 각 주소의 메모리 위치에 정확히 하나의 캐시 블록을 할당하기 때문에 구현이 매우 간단하다.
2. 속도가 빠르다: Cache hit가 많을 때는 데이터를 가져오는 데 걸리는 시간이 빠르다.
3. 저비용: Direct Mapped Cache는 일반적으로 다른 방식의 캐시보다 구현 비용이 낮다.

단점:
1. Cache thrashing 발생 가능성: 메모리의 일부 영역에 집중된 데이터를 처리하는 경우, Direct Mapped Cache는 겹치지 않는 메모리 주소에 일치하는 캐시 라인이 없어 cache thrashing이 발생할 수 있다.
2. Cache miss 그룹화: Cache miss가 일어나면 이전에 발생한 미스와 함께 그룹화되어 미스의 빈도가 높아질 수 있다.
3. Cache 용량 한계: Direct Mapped Cache는 메모리 접근 주소의 일부에만 저장된다. 이에 따라 Cache 용량 한계가 발생할 수 있는데, 이러한 문제를 개선하려면 Fully Associative Cache나 Set-Associative Cache로 대체해야 한다.' , now(), now()),
(3, 'Fully Associative Cache란 무엇인가요?','Fully Associative Cache는 캐시 메모리 구조 중 하나로, 데이터를 저장할 블록의 위치를 자유롭게 선택할 수 있는 캐시 메모리입니다. 이는 Direct Mapped Cache와 달리 데이터를 저장할 위치가 고정되어 있지 않으므로, 특정한 블록에 대한 요청이 있을 때 다른 블록을 옮기지 않고도 해당 블록을 저장할 수 있다는 장점이 있습니다.

Fully Associative Cache에서는 태그 비교 방식으로 데이터를 검색합니다. 태그는 캐시에 저장된 블록의 메모리 위치와 같은 정보를 담고 있습니다. 따라서 원하는 데이터가 캐시에 저장되어 있는지 확인하기 위해, 요청된 주소의 태그와 캐시에 저장된 모든 블록의 태그를 비교해야 합니다. 이는 Direct Mapped Cache보다 복잡한 검색 과정을 필요로 하지만, 더 높은 적중률을 보인다는 장점이 있습니다.

그러나 Fully Associative Cache는 적은 자원으로 많은 데이터를 저장하기 어렵기 때문에, 대부분의 컴퓨터 시스템에서는 Set-Associative Cache와 같이 다른 방식의 캐시 메모리를 사용합니다.' ,now(), now()),
(3, '고정 소수점 표현 방식이란 무엇인가요?','고정 소수점 표현 방식은 소수점 이하의 자릿수를 일정하게 고정하는 방식으로, 부동 소수점 표현 방식과는 대조적입니다. 고정 소수점은 소수점 이하 자리수가 일정하기 때문에 빠른 계산이 가능하고, 부동 소수점에 비해 구현이 간단합니다. 그러나 작은 수나 큰 수의 표현이 제한되는 단점이 있습니다. 예를 들어, 4비트의 고정 소수점에서는 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4와 같이 8개의 가능한 값만 표현할 수 있습니다.' ,now(), now()),
(3, '부동 소수점 표현 방식이란 무엇인가요?','부동 소수점 표현 방식은 실수를 컴퓨터가 이해할 수 있는 이진수로 표현하는 방식입니다. 이진수로 표현되는 실수는 가수부와 지수부로 구성되며, 가수부는 소수점 이하 자리수를 표현하고 지수부는 소수점 위치를 나타냅니다. 이 방식은 유한한 비트 수로도 매우 큰 범위의 실수 수를 표현할 수 있기 때문에 컴퓨터에서 실수 계산을 수행하는데 매우 일반적으로 사용됩니다. 그러나 부동 소수점의 정밀도가 유한하기 때문에 연산에서 적절한 반올림, 절삭 등이 필요합니다.' ,now(), now()),
(3, '캐시의 지역성 원리에 대해 설명해 주세요.','캐시의 지역성 원리는 한 번 접근한 메모리 영역에 다시 접근할 확률이 높다는 원리입니다. 이는 프로그램이 실행될 때 메모리 영역이 지역적으로 집중되어 있기 때문에 발생합니다. 즉, 프로그램에서 사용되는 데이터나 명령어는 일정한 범위 내에서만 사용되며, 이러한 지역성을 활용하여 캐시에서 데이터를 더 빠르게 로드할 수 있습니다.

이를 예로들면, 배열을 순차적으로 접근하는 코드에서는 배열에 접근한 이전 데이터를 캐시에서 쉽게 찾을 수 있으므로 데이터를 빠르게 로드할 수 있습니다. 또한, 반복적으로 실행되는 루프에서도 이전에 사용한 데이터나 명령어를 캐시에서 빠르게 찾을 수 있습니다.

따라서, 캐시의 지역성 원리를 잘 활용하면 메모리 접근 시간을 줄일 수 있어 프로그램의 성능을 향상시킬 수 있습니다.' ,now(), now()),
(3, '시스템 소프트웨어와 응용 소프트웨어의 차이점은 무엇인가요?','시스템 소프트웨어는 컴퓨터의 하드웨어와 소프트웨어를 제어하거나 관리하기 위해 설계된 프로그램으로, 운영 체제, 드라이버, 라이브러리, 컴파일러 등이 이에 속합니다. 반면에 응용 소프트웨어는 사용자가 컴퓨터를 통해 원하는 작업을 수행하거나 목적을 달성하기 위해 설계된 프로그램으로, 워드프로세서, 그래픽 디자인 소프트웨어, 게임 소프트웨어 등이 이에 속합니다. 즉, 시스템 소프트웨어는 컴퓨터 자체에 대한 제어를 담당하고, 응용 소프트웨어는 사용자의 요구에 따른 작업을 수행하는 것이 주된 차이점입니다.' ,now(), now()),
(3, '컴퓨터 구조에서 파이프라이닝이란 무엇인가요?', '파이프라이닝은 컴퓨터 구조에서 여러 단계로 나누어 처리되는 명령어를 동시에 처리하는 기술입니다. 이를 통해 하나의 명령어가 처리되는 동안 다른 명령어가 다음 단계로 넘어가며 병렬 처리가 가능해집니다. 이러한 방식으로 처리하면, 전체적인 처리 속도가 더욱 빨라지고 효율성이 높아집니다. 그러나 파이프라이닝 기술은 명령어간의 의존성 문제나 분기 문제 등이 발생할 가능성이 있으므로, 이에 대한 처리 방식도 고려해야 합니다.',now(), now()),
(3, '메인 메모리의 heap 영역에 대해 설명해 주세요.','heap 영역은 프로그램에서 동적으로 할당되는 데이터가 저장되는 영역입니다. 메모리의 크기가 동적으로 변경될 수 있으며, 사용자가 할당 및 해제하는 메모리 공간이 이곳에 할당됩니다.

heap 영역은 프로그램이 실행 중인 동안 운영체제에 요청하여 동적으로 할당된 메모리를 제어하고, 해제할 수 있어야 합니다. C, C++과 같은 언어에서는 malloc, free, new, delete와 같은 함수를 사용하여 heap 영역을 사용합니다.

하지만 heap 영역에서의 메모리 할당과 해제는 메모리 공간의 할당과 해제를 담당하는 프로그래머의 몫입니다. 즉, 할당된 메모리 공간을 반환하지 않을 경우, heap 영역에는 메모리 누수(Memory Leak)가 발생하여 시스템에 부하를 지속적으로 높일 수 있습니다. 따라서 프로그래머는 heap 영역에서 메모리를 최적화하고, 할당/해제를 제대로 관리함으로써 시스템 안정성과 성능을 향상시켜야합니다.' ,now(), now()),
(3, '패리티 비트에 대해 설명해 주세요.', '패리티 비트는 데이터 전송 시 오류 검출을 위해 사용되는 추가 비트입니다. 일반적으로 전송되는 데이터에 추가되어 데이터 비트의 홀수/짝수 패리티를 유지합니다.

예를 들어, 8비트 데이터 "0101 0011"의 짝수 패리티를 구할 경우, 공간을 만들고 다음과 같이 계산합니다.

| 0 | 1 | 0 | 1 | 0 | 0 | 1 | 1 |
| - | - | - | - | - | - | - | - |
| - | - | - | - | - | - | - | - |
| P |   | P |   | P | P |   |   |

여기에서 P 비트는 이진 데이터에서 1의 숫자가 짝수인지 홀수인지를 결정합니다. 이 경우 "0101 0011"의 경우 1의 개수가 짝수이므로 P 비트는 0이 됩니다. 따라서 파리티 비트가 추가된 9비트 전송 데이터는 다음과 같이 됩니다.

| 0 | 1 | 0 | 1 | 0 | 0 | 1 | 1 | 0 |
| - | - | - | - | - | - | - | - | - |
| - | - | - | - | - | - | - | - | - |
| P |   | P |   | P | P |   |   | P |

이렇게 전송된 데이터는 수신측에서 수신된 데이터에서 다시 패리티 비트를 계산하여 오류가 있는지를 검사할 수 있습니다. 예를 들어, 송신측의 데이터가 "0101 0111"인 경우, 이번에는 P 비트가 1이 되어야 합니다. 그러나 수신측에서 0으로 수신되면 오류가 있음을 나타냅니다.',now(), now());

-- 자료구조 , subject_id : 4
insert into question (subject_id, content, answer ,created_at, updated_at) values
(4, '힙 자료구조란 무엇인가요?','힙(Heap) 자료구조는 일종의 완전 이진 트리(Binary Tree) 구조로, 부모 노드가 자식 노드보다 우선 순위를 가지는 자료구조입니다. 힙은 큰 값을 루트 노드에 위치시켜 최대 값을 검색하거나 작은 값을 루트 노드에 위치시켜 최소 값을 검색하는 경우에 주로 사용됩니다. 또한 힙은 새로운 값을 추가하거나 삭제하는 데 성능이 우수합니다. 대표적으로 우선순위 큐(Priority Queue) 구현에 사용됩니다.' ,now(), now()),
(4, '트리의 순회 방식에 대해 설명해 주세요.','트리의 순회 방식은 트리 구조의 모든 노드를 방문하는 방법을 의미합니다. 트리를 순회할 때는 노드를 방문하는 순서에 따라 전위 순회(pre-order traversal), 중위 순회(in-order traversal), 후위 순회(post-order traversal) 방식이 있습니다.

1. 전위 순회(pre-order traversal)
전위 순회 방식은 루트 노드에서 시작하여 왼쪽 서브트리를 모두 방문한 후에 오른쪽 서브트리를 모두 방문하는 방식입니다. 즉, 노드를 본 다음 왼쪽 자식 노드를 방문한 후 오른쪽 자식 노드를 방문합니다.

2. 중위 순회(in-order traversal)
중위 순회 방식은 왼쪽 서브트리를 모두 방문한 후 루트 노드를 방문한 후에 오른쪽 서브트리를 모두 방문하는 방식입니다. 즉, 왼쪽 자식 노드를 보고 왼쪽 자식 노드를 방문한 후 노드 자체를 방문합니다.

3. 후위 순회(post-order traversal)
후위 순회 방식은 왼쪽 서브트리를 모두 방문한 후 오른쪽 서브트리를 모두 방문한 후 루트 노드를 방문하는 방식입니다. 즉, 왼쪽 자식 노드를 보고 왼쪽 자식 노드를 방문한 후 오른쪽 자식 노드를 보고 오른쪽 자식 노드를 방문한 후 노드 자체를 방문합니다.

이러한 트리의 순회 방식은 탐색, 검색, 출력 등의 작업에서 매우 유용하게 사용됩니다.' ,now(), now()),
(4, '링크드리스트의 단점에 대해 설명해 주세요.','1. 순차 접근이 어렵습니다.
링크드 리스트의 각 노드는 다음 노드를 가리키는 포인터를 가지고 있기 때문에 삽입, 삭제, 탐색을 하기 위해서는 순차적으로 접근해야 합니다. 이 때문에 연결 리스트에서는 순차적 접근이 어렵기 때문에 조회나 검색 시에는 O(n)의 시간 복잡도를 가지게 됩니다.

2. 메모리 공간 낭비
링크드 리스트는 각 노드마다 포인터 변수를 추가해야 하므로 메모리 공간을 낭비할 수 있습니다. 또한 노드가 임의로 삽입되고 삭제되면 메모리가 낭비될 가능성이 높습니다.

3. 캐시 지역성이 떨어집니다.
캐시의 경우 데이터를 빠르게 검색하기 위해 최근 사용한 데이터를 메모리에 저장하는 기술인데, 링크드 리스트는 데이터를 메모리 블록에서 불연속적으로 저장하기 때문에 캐시 지역성이 떨어지고, 더 많은 캐시 메모리를 사용해야 합니다.

4. 리스트 길이를 모르는 경우 탐색이 어렵습니다.
링크드 리스트는 리스트 길이를 알기 위해서는 일일이 모든 노드를 탐색해야 합니다. 따라서 탐색 시간이 많이 소모됩니다.' ,now(), now()),
(4, '해시의 충돌 문제를 해결하기 위한 방안 중에는 어떤 것들이 존재하나요?','1. 개별 체이닝 (Chaining): 해시 테이블의 각 버킷에 연결 리스트를 만들어 충돌한 값을 연결 리스트에 추가하는 방식
2. 개방 주소법 (Open Addressing): 충돌이 일어난 버킷 이외의 다른 버킷에 값을 삽입하는 방식
    - 선형 탐사 (Linear Probing): 다음 위치에 삽입하는 방식
    - 제곱 탐사 (Quadratic Probing): 그다음 위치에 제곱수 만큼 떨어진 위치에 삽입하는 방식
    - 이중 해싱 (Double Hashing): 두 개의 해시 함수를 사용하여 다음 위치를 정하는 방식
3. 재해싱 (Rehashing): 해시 충돌이 일어나면 해시 함수를 다시 계산하여 재해싱하는 방식
4. 완벽 해시 함수 (Perfect Hashing): 충돌이 발생하지 않는 완벽한 해시 함수를 만드는 방식
5. 블룸 필터 (Bloom Filter): 해시 충돌을 감지하고 효율적으로 저장하는 자료구조. 충돌이 발생하지 않았다는 보장이 없으므로, 오류 발생 가능성이 있다는 단점이 있다.' ,now(), now()),
(4, '웹 브라우저의 이전페이지로 돌아가기와 에디터의 되돌리기 Undo 기능을 구현하기에 적합한 자료구조는 무엇인가요?','스택(Stack) 자료구조가 이전페이지로 돌아가기와 에디터의 되돌리기 Undo 기능에 적합합니다. 스택은 Last-In First-Out (LIFO) 구조로 최근에 추가된 데이터가 가장 먼저 삭제되는 구조이기 때문에, 이전 페이지나 이전 편집 상태를 저장하고 이를 순차적으로 불러오는 데에 용이합니다.' ,now(), now()),
(4, '그래프의 인접 리스트 구조에 대해 설명해 주세요.','그래프의 인접 리스트 구조란, 각 노드마다 해당 노드와 인접한 다른 노드들을 리스트 형태로 저장하는 방식입니다. 인접 리스트는 각 노드마다 리스트를 가지고 있으며, 해당 노드와 연결된 다른 노드들은 해당 리스트에 저장됩니다. 이러한 구조는 그래프 내 노드간의 연결 관계를 효율적으로 저장할 수 있어, 그래프 계산 알고리즘에서 많이 사용되며, 메모리 사용도 적습니다. 또한 해당 노드와 연결된 간선의 개수만큼만 리스트 크기를 가지므로, 완전 그래프 같이 간선의 개수가 많은 경우에도 효과적입니다. 하지만 인접리스트 구조는 노드 간의 연결 관계를 찾는데 최악의 경우 O(n)만큼의 시간이 소요될 수 있다는 단점이 있습니다.' ,now(), now()),
(4, '그래프의 인접 행렬 구조에 대해 설명해 주세요.','그래프의 인접 행렬(Adjacency Matrix)은 그래프를 2차원 배열로 나타낸 것입니다. 이 배열에서 배열의 i번째 행과 j번째 열을 보면, i번째 정점과 j번째 정점이 연결되어 있는지 여부를 확인할 수 있습니다. 만약 연결되어 있다면, 해당 위치의 값은 1이고, 그렇지 않다면 0입니다. 또한 무방향 그래프의 경우, 대칭성을 가지므로 인접 행렬은 대각선을 기준으로 대칭 구조를 가집니다. 이러한 인접 행렬은 그래프 탐색 알고리즘 등 다양한 그래프 이론 문제들에서 활용되며, 이를 이용해 그래프의 연결성 등을 파악할 수 있습니다.' ,now(), now()),
(4, '이진 탐색 트리란 무엇인가요?','이진 탐색 트리는 각 노드가 최대 두 개의 자식 노드를 가지며, 왼쪽 자식 노드는 현재 노드보다 작은 값, 오른쪽 자식 노드는 현재 노드보다 큰 값으로 정렬된 이진 트리를 말합니다. 이러한 특성 때문에 이진 탐색 트리는 데이터 검색과 정렬 등에 유용하게 사용됩니다. 또한, 이진 탐색 트리는 AVL 트리나 레드-블랙 트리와 같은 균형 잡힌 이진 탐색 트리로 구현되기도 합니다.' ,now(), now()),
(4, 'AVL 트리란 무엇인가요?', 'AVL 트리는 이진 탐색트리의 일종으로, 균형잡힌 이진 탐색트리(Balanced Binary Search Tree)라고도 불립니다. AVL 트리에서는 모든 노드의 왼쪽 서브트리와 오른쪽 서브트리의 높이 차이가 1을 초과하지 않도록 유지됩니다. 따라서 AVL 트리에서의 탐색, 삽입, 삭제 연산 등의 시간 복잡도는 O(log₂ n)이 되어 매우 빠르고 효율적인 자료구조입니다. 예를 들어, 일반적인 이진 탐색트리에서는 노드의 삽입이나 삭제 시에 균형을 맞추기 위해 전체 트리의 재구성이 필요할 수 있지만, AVL 트리에서는 해당 노드만을 기준으로 간단한 회전 연산만으로도 균형을 유지할 수 있기 때문에 성능이 우수합니다.',now(), now()),
(4, 'Red-Black-Tree란 무엇인가요?','Red-Black-Tree(레드-블랙 트리)는 자가 균형 이진 검색 트리(BST)로서, 노드가 빨간색 또는 검은색이며 다음과 같은 규칙을 따릅니다.

1. 노드는 빨간색 또는 검은색 중 하나이다.
2. 루트 노드는 검은색이다.
3. 모든 리프 노드는 검은색이다.
4. 빨간색 노드의 자식 노드는 모두 검은색이다.
5. 어떤 노드로부터 시작되어 리프 노드에 도달하는 모든 경로에는 동일한 개수의 검은색 노드가 있다.

이 규칙들을 통해 Red-Black-Tree는 서로 균형을 유지하면서 노드 삽입, 삭제, 검색 연산을 빠르게 수행할 수 있습니다. 따라서 데이터를 정렬된 상태로 유지하지 않고 BST의 장점인 빠른 검색 속도와 정렬 기능을 모두 갖춘 자료 구조로서 많이 사용됩니다.' ,now(), now());

-- 알고리즘 , subject_id : 5
insert into question (subject_id, content, answer,created_at, updated_at) values
(5, '동적 계획법(Dynamic Programming)에 대해 설명해 주세요.','동적 계획법(Dynamic Programming)은 다이나믹 프로그래밍 또는 DP라고도 불리며, 복잡한 문제를 푸는 방법 중 하나입니다.

동적 계획법은 큰 문제를 작은 문제로 쪼개고, 작은 문제를 먼저 해결해가며 전체 문제를 해결하는 방법입니다. 이 때, 작은 문제들의 해결 과정을 저장해두고, 필요할 때마다 재활용할 수 있는 메모리 제이션(Memoization)이라는 기술을 이용하는데, 이는 이미 구한 값을 저장해뒀다가 다음에 다시 호출될 때 빠르게 결과를 리턴할 수 있도록 한다는 것입니다.

동적 계획법은 다음과 같은 특징을 가집니다.

1. 최적 부분 구조(Optimal Substructure)
- 큰 문제의 최적해를 작은 문제의 최적해로부터 구할 수 있습니다.

2. 중복 부분 문제(Overlapping Subproblems)
- 작은 문제를 반복해서 해결해야 한다는 특징이 있습니다.

동적 계획법을 사용하면 수십배, 수천배 이상 빠른 성능을 발휘할 수 있습니다. 이는 이전에 해결했던 문제들의 결과를 저장해 뒀다가 빠르게 사용할 수 있기 때문입니다. 대표적인 예시로, 피보나치 수열이나 최장 공통 부분 수열(LCS) 등이 있습니다.' ,now(), now()),
(5, '힙 정렬의 시간복잡도는 무엇인가요?', '힙 정렬의 시간 복잡도는 O(n log n)입니다.',now(), now()),
(5, '깊이 우선 탐색에 대해 설명해 주세요.','깊이 우선 탐색(DFS, Depth First Search)은 그래프나 트리의 노드를 탐색할 때 사용하는 알고리즘 중 하나입니다. 이 알고리즘은 한 노드를 시작으로 깊이를 우선하여 탐색을 진행하며, 끝까지 탐색한 후 다시 돌아와 다음 노드를 탐색합니다.

DFS는 스택(Stack) 자료구조나 재귀 함수를 이용해 구현할 수 있습니다. 구체적인 탐색 방법은 다음과 같습니다.

1. 시작 노드를 방문하고, 방문한 노드를 스택에 저장합니다.
2. 스택에 저장된 가장 최근 방문한 노드를 꺼내어 그 노드의 인접 노드 중 방문하지 않은 노드를 찾습니다.
3. 해당 노드를 방문하지 않았다면, 그 노드를 방문하고 스택에 저장합니다.
4. 해당 노드를 이미 방문한 경우, 스택에 저장하지 않고 다음 인접 노드를 찾습니다.
5. 스택이 빌 때까지 2~4 과정을 반복합니다.

DFS는 노드의 개수가 많아지면 탐색 속도가 느려질 수 있으며, 무한루프에 빠질 가능성이 있습니다. 따라서 노드를 방문할 때마다 방문 여부를 체크하고, 노드의 방문 여부를 기준으로 스택에 추가할 지 여부를 결정하는 등의 추가적인 보완이 필요합니다.' ,now(), now()),
(5, '너비 우선 탐색에 대해 설명해 주세요.', '너비 우선 탐색(Breadth-first search, BFS)은 그래프를 탐색하는 알고리즘 중 하나로, 시작 노드에서 시작하여 그래프의 모든 노드를 탐색하는 방법입니다. 먼저 시작 노드에서 인접한 모든 노드를 방문하고, 그 다음 인접한 모든 노드를 방문하는 방식으로 너비를 우선으로 탐색합니다.

BFS는 큐(Queue)를 이용하여 탐색을 진행합니다. 시작 노드를 큐에 넣고, 그 노드의 인접한 노드를 큐에 차례로 넣어가며 방문합니다. 이 과정에서 이미 방문한 노드는 다시 큐에 넣지 않습니다. 이렇게 큐에서 하나씩 꺼내가며 인접한 노드를 방문하므로, 시작 노드와 가까운 노드부터 탐색을 진행하는 특징을 가지고 있습니다.

BFS는 최단 경로를 구하는 문제, 미로 찾기 문제 등에 유용하게 사용될 수 있습니다. 또한, DFS(Depth-first search)와 달리 모든 노드를 탐색하므로, 그래프가 연결되어 있는 경우 모든 노드를 방문할 수 있습니다.',now(), now()),
(5, 'Stable Sort란 무엇인가요?','Stable Sort란 입력 데이터에서 같은 값의 두 항목의 상대적인 순서가 정렬 후에도 유지되는 정렬 알고리즘입니다. 즉, 같은 값인 경우 입력 데이터의 순서가 유지되는 것을 말합니다. 예를 들어, 이름과 나이가 동시에 들어 있는 데이터에서 나이를 기준으로 정렬할 경우 같은 나이를 가지는 사람들 중에서는 이름 순으로 정렬이 되는 것입니다. 반면에, Unstable Sort는 입력 데이터에서 같은 값을 가지는 항목의 순서가 정렬 후에 바뀔 수 있습니다. 즉, 입력 데이터의 순서와 무관하게 정렬이 되는 것을 말합니다.' ,now(), now()),
(5, '다익스트라 알고리즘에 대해 설명해 주세요.','다익스트라 알고리즘(Dijkstra algorithm)은 최단 경로를 찾기 위한 대표적인 알고리즘 중 하나입니다.

주어진 그래프에서 출발점으로부터 모든 다른 노드들까지의 최단 경로를 찾을 수 있습니다. 이 알고리즘은 음의 가중치를 가지는 간선이 없는 그래프에서 적용 가능합니다.

알고리즘은 다음과 같습니다.

1. 출발 노드를 정한다.
2. 출발 노드의 최단 거리는 0으로 설정한다.
3. 출발 노드를 제외한 모든 노드들의 최단 거리를 무한대로 설정한다.
4. 현재 노드와 연결된 노드들을 탐색하면서, 출발 노드로부터 그 노드까지의 거리를 계산한다.
5. 이 거리가 현재까지 계산한 해당 노드까지의 최단 거리보다 작을 경우, 해당 노드로 가는 최단 경로가 업데이트 된다.
6. 모든 노드를 탐색할 때까지 4-5번의 과정을 반복한다.

이 알고리즘을 구현할 때, 우선순위 큐(Priority Queue)를 사용함으로써 탐색할 노드를 관리합니다. 우선순위 큐에는 현재까지 계산한 출발점으로부터 해당 노드까지의 최단 거리를 기준으로 정렬되어 들어갑니다.

또한 알고리즘의 시간복잡도는 O(|E|+|V|log|V|)입니다. 경로를 찾는 데 사용되는 간선의 개수(E)와 노드의 개수(V)에 따라 수행 시간이 달라집니다.' ,now(), now()),
(5, '피보나치 수열을 구현할 수 있는 알고리즘 3가지를 설명하고, 각 시간복잡도에 대해 설명해 주세요.','1. 재귀함수를 이용한 피보나치 수열 구현
재귀적으로 이전 두 값을 더해 현재 값을 구하는 방식으로 구현한다. 시간복잡도는 O(2^n)이며, 지수 시간 복잡도로 인해 n 값이 대단히 작을 때만 유효한 방법이다.

2. 동적 계획법(DP)을 이용한 피보나치 수열 구현
DP를 이용하여 이전에 구한 값을 저장하고 재사용하는 방식으로 구현한다. 시간복잡도는 O(n)이며, 상수 시간 복잡도로 인해서 n 값이 어느정도 크더라도 유효한 방법이다.

3. 행렬을 이용한 피보나치 수열 구현
행렬의 거듭제곱을 이용하여 구현한다. 시간복잡도는 O(logn) 이며, 로그 시간 복잡도로 인해서 매우 큰 n 값에서도 유효한 방법이다. 단, 계산하는데 있어서 행렬의 곱셈이 필요하므로 그 곱셈을 빠르게 수행하는 방법을 사용해야 한다. (ex. Strassen 알고리즘)' ,now(), now()),
(5, '퀵 정렬의 경우 최악의 시간 복잡도 N^2이 발생하는 경우를 설명해 주세요.','퀵 정렬은 pivot 값을 기준으로 분할하여 정렬하는 알고리즘입니다. 하지만 pivot 값이 최솟값이나 최댓값으로 설정되는 경우, 즉 분할이 극도로 불균형한 경우에는 시간 복잡도가 최악인 N^2이 발생할 수 있습니다.

예를 들어, 정렬할 배열이 이미 정렬되어 있는 경우 pivot 값을 맨 처음이나 맨 마지막으로 설정하면, 분할이 극도로 불균형하게 이루어집니다. 이 경우, 퀵 정렬의 재귀 호출 횟수는 N번이며, 각각의 재귀 호출에서 처리해야 할 데이터의 개수는 1씩 감소하지 않아서, 시간 복잡도는 N^2입니다.

따라서, pivot 값을 지정할 때에는 가능한 정렬된 데이터를 고르지 않도록 주의해야 합니다. 여러 가지 pivot 선택 방식이 제안되어 있으며, 대표적인 것으로는 중앙값, 랜덤한 값을 선택하는 방식 등이 있습니다. 이러한 방식으로 pivot 값을 선택하면, 퀵 정렬의 평균적인 시간 복잡도인 O(NlogN)에 근접하게 수행됩니다.' ,now(), now()),
(5, '알고리즘에서 bitmask를 사용하는 경우에 대해 설명해 주세요.','Bitmask는 이진수를 이용하여 원하는 비트를 표시하고, 해당 비트를 조작하는 기법입니다. 이러한 bitmask는 여러 가지 문제를 해결하는 데 사용됩니다.

예를 들어, 집합과 관련된 문제에서 bitmask를 사용할 수 있습니다. 집합의 원소들을 0 또는 1로 표시하는 것으로 집합을 구현할 수 있습니다. 이진수의 각 비트는 집합의 원소를 나타내고, 해당 비트가 1이면 집합에 원소가 포함되어 있음을 나타냅니다. 이진수의 각 비트를 조작하여 집합의 합집합, 교집합 등을 구할 수 있습니다.

다른 예로, 완전탐색 알고리즘에서 bitmask를 사용할 수 있습니다. 모든 경우의 수를 구하는 경우, 여러 가지 조합을 만들어야 합니다. bitmask를 사용하면 각 비트가 조합에 포함되는지 여부를 나타내며, 모든 경우의 수를 쉽게 구할 수 있습니다.

또한, 시뮬레이션 게임에서 유닛의 상태를 bitmask로 나타내어 관리하기도 합니다. 각 비트는 유닛의 상태를 표시하고, 해당 비트를 조작하여 유닛의 상태를 변경할 수 있습니다.

따라서, bitmask는 다양한 문제에서 활용되며, 이진수를 이용한 간단하고 효율적인 구현이 가능합니다.' ,now(), now()),
(5, '분할-정복 기법을 사용하는 알고리즘 3가지는 무엇인가요?','1. 합병 정렬 (Merge Sort)
2. 퀵 정렬 (Quick Sort)
3. 이진 검색 (Binary Search)' ,now(), now());

-- 컴퓨터네트워크 , subject_id : 6
insert into question (subject_id, content, answer,created_at, updated_at) values
(6, '3way handshaking에 대해 설명해 주세요.','3-way handshake는 TCP/IP 프로토콜에서 사용되는 통신 절차로, 데이터를 보내기 전에 송수신 측이 서로 상태를 확인하고 데이터 전송이 가능한 상태인지를 확인하는 과정입니다.

이 과정은 다음과 같이 이루어집니다.

1. 클라이언트는 서버에게 SYN(시작 신호) 패킷을 보냅니다.
2. 서버는 SYN 패킷을 받고, SYN/ACK(응답 신호) 패킷을 보냅니다.
3. 클라이언트는 SYN/ACK 패킷을 받고, ACK(확인 신호) 패킷을 보냅니다.

이 과정을 통해 송수신 측은 서로 존재를 확인하고, 데이터 전송이 가능한 상태인지를 확인합니다. 이를 통해 데이터 전송 중 발생할 수 있는 오류와 중복을 방지하고, 안정적인 데이터 전송을 보장합니다.' ,now(), now()),
(6, '4way handshaking에 대해 설명해 주세요.','4way handshaking은 TCP/IP 연결 해제 과정에서 수행되는 절차입니다. 연결 해제를 위해서는 양쪽 호스트 간에 일련의 메시지 교환과 함께 4way handshake 절차가 수행되어야 합니다.

4way handshaking 과정은 다음과 같습니다.

1. 호스트 A가 연결 해제를 요청하는 FIN(FINished) 패킷을 전송합니다.
2. 호스트 B는 FIN 패킷을 받고, 연결을 해제하기 전에 먼저 확인하기 위해 ACK(Acnowledge) 메시지를 보냅니다.
3. 호스트 B는 연결을 해제하기 위해 FIN 패킷을 전송합니다.
4. 호스트 A는 FIN 패킷을 받고, 연결이 해제됨을 확인하기 위해 ACK 메시지를 보냅니다.

이렇게 4way handshaking을 수행하면, 양쪽 호스트 간에 안전하게 연결이 해제됩니다. 이는 데이터의 손실이나 중복을 방지하고, 네트워크 상황에 따라 안정적인 연결을 유지하고 해제할 수 있도록 보장합니다.' ,now(), now()),
(6, 'OSI 7계층에 대해 설명해 주세요.','OSI 7계층은 Open Systems Interconnection Reference Model의 약자로, 네트워크 기술 표준을 정의하는 모델입니다. 이 모델은 컴퓨터 간 통신을 위한 체계를 7개의 계층으로 나눠 각 계층마다 특정 기능을 수행하도록 구성합니다. OSI 모델의 7계층은 다음과 같습니다.

1. 물리 계층 (Physical Layer): 데이터 전송을 위한 물리적인 매체를 지정하고 데이터를 전기 또는 광 신호로 변환하는 기능을 수행합니다. 케이블, 허브, 리피터, 무선 등이 이 계층에 해당합니다.

2. 데이터 링크 계층 (Data Link Layer): 오류검출 및 재전송, 흐름제어, 매체 접근제어 등의 기능을 수행합니다. 이 계층에서는 MAC 주소를 사용하여 데이터 전송에 사용되는 물리적인 장비들을 식별합니다. 이더넷, 스위치 등이 이 계층에 해당합니다.

3. 네트워크 계층 (Network Layer): 데이터 전송 경로를 결정하고 최적화하는 기능을 수행합니다. 라우팅, IP 주소 할당, 패킷 분할 및 조립 등이 이 계층에 해당합니다. 라우터, IP 프로토콜 등이 이 계층에 해당합니다.

4. 전송 계층 (Transport Layer): 데이터 전송의 신뢰성과 흐름제어 기능을 수행합니다. TCP, UDP 등이 이 계층에 해당합니다.

5. 세션 계층 (Session Layer): 통신 중인 양쪽 컴퓨터 간에 세션을 설정하고, 유지하며, 종료하는 기능을 수행합니다.

6. 표현 계층 (Presentation Layer): 데이터 표현 방식, 암호화, 압축, 코드 변환 등의 기능을 수행합니다.

7. 응용 계층 (Application Layer): 사용자가 사용하는 서비스와 관련된 기능을 수행합니다. 웹 브라우저, 이메일, FTP 등이 이 계층에 해당합니다.

이처럼 OSI 7계층은 각 계층마다 특정한 역할을 수행하며, 이를 통해 네트워크에서 통신의 효율성과 안전성이 보장됩니다.' ,now(), now()),
(6, 'TCP와 UDP의 차이점은 무엇인가요?','TCP와 UDP는 인터넷 프로토콜 중 두 가지입니다. 다음은 TCP와 UDP의 주요 차이점입니다.

1. 연결 설정 방식:
TCP는 연결 기반 프로토콜로, 데이터를 전송하기 전에 반드시 연결을 설정해야 합니다. UDP는 연결 없는 프로토콜로, 데이터를 전송하기 전에 연결을 설정하지 않습니다.

2. 신뢰성:
TCP는 신뢰성 있는 데이터 전송을 보장합니다. 데이터 패킷의 전송 여부를 확인하고, 필요한 경우 재전송을 수행합니다. UDP는 데이터 전송의 신뢰성을 보장하지 않습니다. 데이터 패킷의 전송 여부를 확인하지 않고, 단순히 전송합니다.

3. 속도:
TCP는 신뢰성 있는 데이터 전송을 보장하기 때문에, 실시간 처리에는 적합하지 않습니다. UDP는 데이터 패킷을 확인하지 않기 때문에, 처리 속도가 빠릅니다.

4. 통신 방향:
TCP는 전이중 (Full-duplex) 통신을 지원합니다. 서로 다른 두 대의 컴퓨터간 양방향 통신이 가능합니다. UDP는 반 이중 (Half-duplex) 통신을 지원합니다. 양방향 통신이 가능하지만, 데이터 전송 방향이 정해져 있습니다.

5. 사용하는 프로그램:
TCP는 대부분의 인터넷 프로그램에서 사용됩니다. 이메일, 웹 브라우저, 파일 서버 등에서 사용됩니다. UDP는 비디오 스트리밍, 음성 통화 등에서 사용됩니다.

요약하자면, TCP는 신뢰성과 안정성 면에서 우수하며, UDP는 처리 속도가 빠르고, 대용량 데이터를 처리하기에 적합합니다. 어떤 프로토콜을 사용할지는 사용하는 프로그램과 그 용도에 따라 결정됩니다.' ,now(), now()),
(6, 'HTTP란 무엇인가요?','HTTP는 Hyper Text Transfer Protocol의 약자로, 인터넷 상에서 웹 브라우저와 웹 서버 간에 통신을 위한 통신규약입니다. HTTP는 웹 페이지나 파일 등을 전송할 때 사용되며, 요청(request)과 응답(response) 형태로 이루어집니다. HTTP는 인터넷 통신의 기본 규약 중 하나이며, 웹 개발에서 가장 많이 사용됩니다. 최근에는 보안을 강화하기 위해 HTTPS(보안 HTTP)가 많이 사용되고 있습니다.' ,now(), now()),
(6, 'TCP/IP의 흐름제어에 대해 설명해 주세요.','TCP/IP 프로토콜의 흐름제어(flow control)는 데이터를 전송하는 속도를 제어하여 수신측이 처리할 수 있는 데이터 양을 유지하는 기술입니다.

TCP는 네트워크 상태에 따라 데이터 전송 속도를 동적으로 조절하며, 네트워크 지연(latency), 손실(loss), 병목 현상(congestion) 등을 고려하여 데이터를 보내는 속도를 적절히 조절합니다.

송신측은 수신측으로부터 받은 ACK(응답) 신호를 확인하고, 수신측이 처리할 수 있는 다음 데이터 양을 파악하여 데이터를 보내는 것이 원칙입니다. 만약 수신측의 처리 능력이 제한적이거나, 네트워크가 혼잡한 경우 TCP는 데이터 전송 속도를 점차적으로 감소시켜 수신측에서 처리할 수 있는 데이터 양을 유지하게 됩니다.

이러한 방식으로 TCP는 데이터의 안정적인 전송을 보장하며, 과도한 데이터 전송으로 인한 네트워크 병목 현상을 방지하는 역할을 합니다.' ,now(), now()),
(6, 'TCP/IP의 혼잡제어에 대해 설명해 주세요.','TCP/IP의 혼잡제어는 네트워크 트래픽의 혼잡에 대비하여 네트워크의 성능을 유지하는 방식입니다. 혼잡 제어는 송신측과 수신측 간의 데이터 흐름을 조절하여 네트워크에 발생할 수 있는 혼잡을 최소화하고 효율적인 데이터 전송을 보장합니다.

TCP/IP의 혼잡제어는 네트워크 상황에 따라 다양한 기법을 사용합니다. 가장 일반적인 혼잡제어 기법은 송신측의 데이터 전송 속도를 수신측의 데이터 처리 속도에 맞추어 조절하는 것입니다. 또한, 송신측과 수신측 간의 통신 지연 시간을 측정하여 데이터 전송 크기를 동적으로 결정하는 방식도 사용됩니다. 이러한 방법들은 혼잡을 방지하면서도 최대한 빠른 데이터 전송을 유지할 수 있는 방식으로 TCP/IP의 안정성과 성능을 유지하는데 중요한 역할을 합니다.' ,now(), now()),
(6, '쿠키와 세션의 차이점에 대해 설명해 주세요.','쿠키는 클라이언트 측에 저장되는 작은 정보 파일이며, 세션은 웹 서버 측에 저장되는 사용자 정보를 관리하는 논리적인 방법입니다.

쿠키는 사용자의 로그인 정보나 이전 방문 기록 등을 저장하기 위해 사용되며, 브라우저에 의해 관리됩니다. 따라서 쿠키에는 보안상의 위험이 있을 수 있습니다.

세션은 웹 서버 측에서 사용자 정보를 저장하고 관리합니다. 사용자가 로그인한 후 세션 ID가 생성되고, 이를 통해 세션 정보가 관리됩니다. 이에 따라 쿠키에 비해 보안성이 높습니다.

또한, 쿠키는 웹 페이지를 이동해도 유지되고, 세션은 브라우저를 닫거나 세션 종료 시 삭제됩니다.

최종적으로, 쿠키는 클라이언트 측에서 저장되므로, 보안성이 낮지만 사용자의 상태 유지에 용이하며, 세션은 웹 서버 측에서 저장되므로 보안성이 높지만 서버 자원을 많이 사용할 수 있습니다.' ,now(), now()),
(6, 'GET과 POST의 차이점에 대해 설명해 주세요.','GET과 POST는 HTTP 프로토콜을 이용하여 웹 서버에 요청하는 방식을 나타낸다.

GET은 웹 서버에서 정보를 가져올 때 사용되는 HTTP 메서드이며, URL을 통해 정보를 전달한다. GET 방식으로 요청을 보낼 때는 데이터를 HTTP 요청 메시지의 URL 끝에 ?와 함께 전달하는데, 이를 쿼리스트링(Query String)이라고 한다. GET 방식은 URL에 저장되므로 보안에 취약하고, 전송할 수 있는 데이터의 양이 제한적이다. 그러나 캐싱을 이용해 빠르게 처리할 수 있어서, 조회나 검색에 사용된다.

POST는 클라이언트에서 웹 서버로 데이터를 전송할 때 사용되는 HTTP 메서드이며, 데이터를 HTTP 요청 메시지의 본문에 담아 전송한다. POST 방식으로 요청을 보낼 때는 데이터를 URL에 노출되지 않고, 본문에 실어서 전달되므로 보안에 강하다. 데이터 양의 제한이 없어서 파일 업로드 등의 대용량 데이터 전송에 이용된다.

따라서, GET은 데이터 양이 적거나 조회 등 단순한 데이터 가져오기에, POST는 데이터 양이 많거나 보안적인 처리가 필요한 경우에 사용된다.' ,now(), now()),
(6, 'PUT과 PATCH의 차이점에 대해 설명해 주세요.','PUT과 PATCH는 모두 RESTful API에서 데이터 수정을 위해 사용되는 HTTP Method입니다. 하지만 둘 사이에는 몇 가지 차이점이 존재합니다.

1. 전체 수정 vs 부분 수정
PUT은 전체 수정을 의미하며, 새로운 데이터로 대체합니다. 즉, 모든 필드를 한 번에 수정합니다. 반면 PATCH는 부분 수정을 의미하며, 일부 필드만 수정합니다. 이는 대부분 JSON 또는 XML 형태로 전달되며, 수정하려는 필드만 변경합니다.

2. 무조건적인 업데이트 vs 조건적인 업데이트
PUT은 무조건적으로 업데이트합니다. 즉, 클라이언트가 전송한 데이터가 서버의 현재 데이터와 다른 경우, 서버에서는 클라이언트가 보내온 데이터로 대체됩니다. 반면 PATCH는 조건적인 업데이트를 수행할 수 있습니다. 서버에서는 클라이언트가 보내온 필드만 변경합니다.

3. 안전한 수정 vs 위험한 수정
PUT은 안전하지 않은 수정이 주로 이루어집니다. 즉, 전체 데이터를 대체하기 때문에 수정할 때 다른 클라이언트나 중간자에게 전혀 예측할 수 없는 방식으로 수정되거나 삭제될 수 있기 때문입니다. 반면 PATCH는 선택적으로 필드를 수정하기 때문에 안전하게 수정할 수 있습니다.

따라서, 전체 데이터를 한 번에 수정하고 안전하지 않은 경우 PUT을 사용합니다. 그러나 일부 필드만 수정하고 안전한 경우 PATCH를 사용합니다.' ,now(), now());

-- 채팅방 6개
INSERT INTO chat_room (member_id, subject_id, title, answer_cnt, total_score, created_at, updated_at)
VALUES
    (1, 1, '운영체제', 0, 0, now(), now()),
    (1, 2, '데이터베이스', 0, 0, now(), now()),
    (1, 3, '컴퓨터구조', 0, 0,now(), now()),
    (1, 4, '자료구조', 0, 0,now(), now()),
    (1, 5, '알고리즘', 0, 0,now(), now()),
    (1, 6, '컴퓨터네트워크', 0, 0,now(), now());
-- 봇 메시지 1개 (북마크 되어있음)
insert into bot_message (chat_room_id, content, answer ,is_bookmarked, created_at, updated_at) values
(1, 'bot-message1', 'answer1' ,true, now(), now());

-- 유저 메시지 1개 (북마크 안되어 있음)
insert into user_message (chat_room_id, content, is_bookmarked, created_at, updated_at) values
(1, 'user-message1', false, now(), now());